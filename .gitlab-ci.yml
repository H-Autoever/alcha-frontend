# stages: 파이프라인의 실행 단계를 정의합니다.
stages:
  - build
  - deploy

# build: Docker 이미지를 빌드하고 ECR에 푸시하는 단계입니다.
build:
  stage: build
  # Docker CLI와 Docker-in-Docker(dind)를 사용하기 위한 이미지입니다.
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: ''
  # 스크립트 실행 전에 Docker에 로그인합니다.
  before_script:
    - apk add --no-cache curl
    - apk add --no-cache python3 py3-pip
    - pip install awscli
    - aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
    - aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
    - aws configure set default.region "$AWS_DEFAULT_REGION"
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY_URL

  script:
    - docker build -t alcha-frontend:latest .
    - docker tag alcha-frontend:latest $ECR_REGISTRY_URL:$CI_PIPELINE_ID
    - docker push $ECR_REGISTRY_URL:$CI_PIPELINE_ID

  # main 브랜치에 푸시될 때만 이 단계가 실행됩니다.
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

  tags:
    - alcha-frontend

deploy:
  stage: deploy
  # sed 명령을 포함하는 경량 이미지를 사용합니다.
  image: alpine
  before_script:
    # SSH 클라이언트를 설치합니다.
    - apk add --no-cache openssh-client

    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # GitLab 변수에 저장된 개인 키를 파일로 만듭니다.
    - cp "$GITOPS_REPO_SSH_KEY" ~/.ssh/id_rsa
  
    # git SSH 키를 등록하여 보안 경고를 무시합니다.
    - ssh-keyscan -H ${GITLAB_HOST_IP} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts


  script:
    - export NEW_TAG=$CI_PIPELINE_ID
    - export ECR_REGISTRY_URLG=$ECR_REGISTRY_URL
    
    # 1. GitOps 저장소 클론
    - git clone git@4.230.1.132:carpoor/alcha-gitops.git
    - cd alcha-gitops
    
    # 2. git 사용자 정보 설정
    - git config user.name "GitLab CI Runner"
    - git config user.email "ci-runner@gitlab.com"

    # 3. deployment.yaml 파일 수정 (sed 사용)
    # 기존 플레이스홀더를 FULL_IMAGE_URL 값으로 치환합니다.
    # 주의: sed 패턴에 슬래시(/)가 포함될 경우 구분자로 다른 문자(예: |)를 사용합니다.
    - sed -i "s|__ECR_REGISTRY_URL__:latest|${ECR_REGISTRY_URL}:${NEW_TAG}|" deployment.yaml
    
    # 4. Git Write Back (커밋 및 푸시)
    # 수정된 deployment.yaml 파일만 추적하고 커밋합니다.
    - git add deployment.yaml
    
    # 5. 변경 사항이 있을 경우에만 커밋하도록 처리
    - |
      if ! git diff-index --quiet HEAD; then
        echo "Updating image tag and pushing to GitOps repo."
        git commit -m "ci: Update React app image tag to ${NEW_TAG}"
        git push origin HEAD:main
      else
        echo "No changes detected in deployment.yaml. Skipping commit."
      fi

  tags:
    - alcha-frontend