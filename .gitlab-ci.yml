# stages: 파이프라인의 실행 단계를 정의합니다.
stages:
  - build
  - deploy

# build: Docker 이미지를 빌드하고 ECR에 푸시하는 단계입니다.
build:
  stage: build
  # Docker CLI와 Docker-in-Docker(dind)를 사용하기 위한 이미지입니다.
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: ''
  # 스크립트 실행 전에 Docker에 로그인합니다.
  before_script:
    - apk add --no-cache curl
    - apk add --no-cache python3 py3-pip
    - pip install awscli
    - aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
    - aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
    - aws configure set default.region "$AWS_DEFAULT_REGION"
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY_URL

  script:
    - docker build -t alcha-frontend:latest .
    - docker tag alcha-frontend:latest $ECR_REGISTRY_URL:$CI_PIPELINE_ID
    - docker push $ECR_REGISTRY_URL:$CI_PIPELINE_ID

  # main 브랜치에 푸시될 때만 이 단계가 실행됩니다.
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

  tags:
    - alcha-frontend

deploy:
  stage: deploy
  image: alpine/git:latest
  
  # Helm Chart를 사용하기 때문에 yq와 ssh-client 설치는 before_script에서 처리합니다.
  before_script:
    # --- SSH 설정 (기존 내용 유지) ---
    - apk add openssh-client
    - eval $(ssh-agent -s)
    - echo "$GITOPS_REPO_SSH_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan 4.230.1.132 >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    
    # --- yq 설치 추가 ---
    # alpine/git 이미지에 yq가 포함되어 있지 않을 경우를 대비하여 설치합니다.
    - wget https://github.com/mikefarah/yq/releases/download/v4.35.2/yq_linux_amd64 -O /usr/bin/yq && chmod +x /usr/bin/yq
    # - apk add --no-cache curl # wget을 사용하지 않고 curl을 사용한다면 필요 (현재 wget을 썼으므로 curl은 생략 가능)

  script:
    - export NEW_TAG=$CI_PIPELINE_ID
    - export ECR_IMAGE_URL="${ECR_REGISTRY_URL}" 

    # 1. GitOps 저장소 클론
    - git clone git@4.230.1.132:carpoor/alcha-gitops.git
    - cd alcha-gitops
    
    # 2. git 사용자 정보 설정
    - git config user.name "GitLab CI Runner"
    - git config user.email "ci-runner@gitlab.com"

    # 3. values.yaml 파일 수정 (yq 사용)
    # yq는 이미지 URL 전체와 태그를 분리해서 처리해야 합니다.
    # ECR_IMAGE_URL은 그대로 두고, 태그만 NEW_TAG로 업데이트합니다.
    - yq e ".image.tag = \"${NEW_TAG}\"" -i frontend/values.yaml
    
    # 4. Git Write Back (커밋 및 푸시)
    # 수정된 values.yaml 파일만 추적하고 커밋합니다.
    - git add frontend/values.yaml
    
    # 5. 변경 사항이 있을 경우에만 커밋하도록 처리 (선택 사항)
    - |
      if ! git diff-index --quiet HEAD; then
        echo "Updating image tag and pushing to GitOps repo."
        git commit -m "ci: Update React app image tag to ${NEW_TAG}"
        git push origin HEAD:main
      else
        echo "No changes detected in values.yaml. Skipping commit."
      fi