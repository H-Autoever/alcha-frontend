# stages: 파이프라인의 실행 단계를 정의합니다.
stages:
  - build

# build: Docker 이미지를 빌드하고 ECR에 푸시하는 단계입니다.
build:
  stage: build
  # Docker CLI와 Docker-in-Docker(dind)를 사용하기 위한 이미지입니다.
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: ''
  # 스크립트 실행 전에 Docker에 로그인합니다.
  before_script:
    - apk add --no-cache curl
    - apk add --no-cache python3 py3-pip
    - pip install awscli
    - aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
    - aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
    - aws configure set default.region "$AWS_DEFAULT_REGION"
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY_URL
    - |
      if [ -z "$VITE_API_SERVER_URL" ]; then
        echo "VITE_API_SERVER_URL is not set. Configure it in GitLab CI/CD variables." >&2
        exit 1
      fi
    - printf "VITE_API_SERVER_URL=%s\n" "$VITE_API_SERVER_URL" > .env.production

  script:
    - docker build -t alcha-frontend:latest .
    - docker tag alcha-frontend:latest $ECR_REGISTRY_URL:$CI_PIPELINE_ID
    - docker push $ECR_REGISTRY_URL:$CI_PIPELINE_ID

  # main 브랜치에 푸시될 때만 이 단계가 실행됩니다.
  rules:
    - if: '$CI_COMMIT_BRANCH == "8-feature/move-to-eks-cluster"'

  tags:
    - alcha-frontend
